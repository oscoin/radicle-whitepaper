@inproceedings{lazy-functional-state-threads,
abstract = {Some algorithms make critical internal use of updatable state, even though their external specification is purely functional. Based on earlier work on monads, we present a way of securely encapsulating stateful computations that manipulate multiple, named, mutable objects, in the context of a non-strict, purely-functional language.

The security of the encapsulation is assured by the type system, using parametricity. Intriguingly, this parametricity requires the provision of a (single) constant with a rank-2 polymorphic type.},
author = {Launchbury, J and Jones, S L Peyton and {Peyton Jones}, Simon},
booktitle = {ACM Conference on Programming Languages Design and Implementation, Orlando (PLDI'94)},
month = {jun},
pages = {24--35},
publisher = {ACM Press},
title = {{Lazy functional state threads}},
url = {https://www.microsoft.com/en-us/research/publication/lazy-functional-state-threads/},
year = {1994}
}
@article{Bauer2013,
abstract = {We present an effect system for core Eff, a simplified variant of Eff, which is an ML-style programming language with first-class algebraic effects and handlers. We define an expressive effect system and prove safety of operational semantics with respect to it. Then we give a domain-theoretic denotational semantics of core Eff, using Pitts's theory of minimal invariant relations, and prove it adequate. We use this fact to develop tools for finding useful contextual equivalences, including an induction principle. To demonstrate their usefulness, we use these tools to derive the usual equations for mutable state, including a general commutativity law for computations using non-interfering references. We have formalized the effect system, the operational semantics, and the safety theorem in Twelf.},
archivePrefix = {arXiv},
arxivId = {1306.6316},
author = {Bauer, Andrej and Pretnar, Matija},
doi = {10.2168/LMCS-10(4:9)2014},
eprint = {1306.6316},
file = {:home/jkarni/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bauer, Pretnar - 2013 - An Effect System for Algebraic Effects and Handlers.pdf:pdf},
month = {jun},
title = {{An Effect System for Algebraic Effects and Handlers}},
url = {http://arxiv.org/abs/1306.6316 http://dx.doi.org/10.2168/LMCS-10(4:9)2014},
year = {2013}
}
@article{Amin2017,
author = {Amin, Nada and Rompf, Tiark},
doi = {10.1145/3158140},
issn = {24751421},
journal = {Proceedings of the ACM on Programming Languages},
month = {dec},
number = {POPL},
pages = {1--33},
title = {{Collapsing towers of interpreters}},
url = {http://dl.acm.org/citation.cfm?doid=3177123.3158140},
volume = {2},
year = {2017}
}
@article{Bauer2013a,
abstract = {We present an effect system for core Eff, a simplified variant of Eff, which is an ML-style programming language with first-class algebraic effects and handlers. We define an expressive effect system and prove safety of operational semantics with respect to it. Then we give a domain-theoretic denotational semantics of core Eff, using Pitts's theory of minimal invariant relations, and prove it adequate. We use this fact to develop tools for finding useful contextual equivalences, including an induction principle. To demonstrate their usefulness, we use these tools to derive the usual equations for mutable state, including a general commutativity law for computations using non-interfering references. We have formalized the effect system, the operational semantics, and the safety theorem in Twelf.},
archivePrefix = {arXiv},
arxivId = {1306.6316},
author = {Bauer, Andrej and Pretnar, Matija},
doi = {10.2168/LMCS-10(4:9)2014},
eprint = {1306.6316},
file = {:home/jkarni/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bauer, Pretnar - 2013 - An Effect System for Algebraic Effects and Handlers.pdf:pdf},
month = {jun},
title = {{An Effect System for Algebraic Effects and Handlers}},
url = {http://arxiv.org/abs/1306.6316 http://dx.doi.org/10.2168/LMCS-10(4:9)2014},
year = {2013}
}
@article{Cartwright1994,
author = {Cartwright, Robert and Cartwright, Robert and Felleisen, Matthias},
journal = {SYMPOSIUM ON THEORETICAL ASPECTS OF COMPUTER SOFTWARE, NUMBER 789 IN LNCS},
pages = {244----272},
title = {{Extensible Denotational Language Specifications}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.25.5941},
year = {1994}
}
@inproceedings{Danvy1988,
address = {New York, New York, USA},
author = {Danvy, Olivier and Malmkjaer, Karoline},
booktitle = {Proceedings of the 1988 ACM conference on LISP and functional programming  - LFP '88},
doi = {10.1145/62678.62725},
file = {:home/jkarni/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Danvy, Malmkjaer - 1988 - Intensions and extensions in a reflective tower.pdf:pdf},
isbn = {089791273X},
pages = {327--341},
publisher = {ACM Press},
title = {{Intensions and extensions in a reflective tower}},
url = {http://portal.acm.org/citation.cfm?doid=62678.62725},
year = {1988}
}
@article{Queinnec1996,
author = {Queinnec, Christian and Queinnec, Christian},
journal = {PROCEEDINGS OF THE REFLECTION'96 CONFERENCE},
pages = {93----104},
title = {{Macroexpansion Reflective Tower}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.38.754},
year = {1996}
}
